// Mocks generated by Mockito 5.3.0 from annotations
// in tv_series/test/presentation/pages/home_tv_series_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:bloc/bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tv_series/domain/usecase/get_now_playing_tv_series.dart' as _i2;
import 'package:tv_series/domain/usecase/get_popular_tv_series.dart' as _i4;
import 'package:tv_series/domain/usecase/get_top_rated_tv_series.dart' as _i6;
import 'package:tv_series/presentation/cubit/tv_series_now_playing_cubit.dart'
    as _i3;
import 'package:tv_series/presentation/cubit/tv_series_popular_cubit.dart'
    as _i5;
import 'package:tv_series/presentation/cubit/tv_series_top_rated_cubit.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetNowPlayingTvSeries_0 extends _i1.SmartFake
    implements _i2.GetNowPlayingTvSeries {
  _FakeGetNowPlayingTvSeries_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvSeriesNowPlayingState_1 extends _i1.SmartFake
    implements _i3.TvSeriesNowPlayingState {
  _FakeTvSeriesNowPlayingState_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetPopularTvSeries_2 extends _i1.SmartFake
    implements _i4.GetPopularTvSeries {
  _FakeGetPopularTvSeries_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvSeriesPopularState_3 extends _i1.SmartFake
    implements _i5.TvSeriesPopularState {
  _FakeTvSeriesPopularState_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetTopRatedTvSeries_4 extends _i1.SmartFake
    implements _i6.GetTopRatedTvSeries {
  _FakeGetTopRatedTvSeries_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvSeriesTopRatedState_5 extends _i1.SmartFake
    implements _i7.TvSeriesTopRatedState {
  _FakeTvSeriesTopRatedState_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [TvSeriesNowPlayingCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesNowPlayingCubit extends _i1.Mock
    implements _i3.TvSeriesNowPlayingCubit {
  MockTvSeriesNowPlayingCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetNowPlayingTvSeries get nowPlayingTvSeries =>
      (super.noSuchMethod(Invocation.getter(#nowPlayingTvSeries),
              returnValue: _FakeGetNowPlayingTvSeries_0(
                  this, Invocation.getter(#nowPlayingTvSeries)))
          as _i2.GetNowPlayingTvSeries);
  @override
  _i3.TvSeriesNowPlayingState get state => (super.noSuchMethod(
          Invocation.getter(#state),
          returnValue:
              _FakeTvSeriesNowPlayingState_1(this, Invocation.getter(#state)))
      as _i3.TvSeriesNowPlayingState);
  @override
  _i8.Stream<_i3.TvSeriesNowPlayingState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i8.Stream<_i3.TvSeriesNowPlayingState>.empty())
          as _i8.Stream<_i3.TvSeriesNowPlayingState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void fetchNowPlayingTv() =>
      super.noSuchMethod(Invocation.method(#fetchNowPlayingTv, []),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.TvSeriesNowPlayingState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i9.Change<_i3.TvSeriesNowPlayingState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [TvSeriesPopularCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesPopularCubit extends _i1.Mock
    implements _i5.TvSeriesPopularCubit {
  MockTvSeriesPopularCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetPopularTvSeries get popularTvSeries =>
      (super.noSuchMethod(Invocation.getter(#popularTvSeries),
              returnValue: _FakeGetPopularTvSeries_2(
                  this, Invocation.getter(#popularTvSeries)))
          as _i4.GetPopularTvSeries);
  @override
  _i5.TvSeriesPopularState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue:
                  _FakeTvSeriesPopularState_3(this, Invocation.getter(#state)))
          as _i5.TvSeriesPopularState);
  @override
  _i8.Stream<_i5.TvSeriesPopularState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i8.Stream<_i5.TvSeriesPopularState>.empty())
          as _i8.Stream<_i5.TvSeriesPopularState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void fetchPopularTv() =>
      super.noSuchMethod(Invocation.method(#fetchPopularTv, []),
          returnValueForMissingStub: null);
  @override
  void emit(_i5.TvSeriesPopularState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i9.Change<_i5.TvSeriesPopularState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [TvSeriesTopRatedCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesTopRatedCubit extends _i1.Mock
    implements _i7.TvSeriesTopRatedCubit {
  MockTvSeriesTopRatedCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetTopRatedTvSeries get topRatedTvSeries =>
      (super.noSuchMethod(Invocation.getter(#topRatedTvSeries),
              returnValue: _FakeGetTopRatedTvSeries_4(
                  this, Invocation.getter(#topRatedTvSeries)))
          as _i6.GetTopRatedTvSeries);
  @override
  _i7.TvSeriesTopRatedState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue:
                  _FakeTvSeriesTopRatedState_5(this, Invocation.getter(#state)))
          as _i7.TvSeriesTopRatedState);
  @override
  _i8.Stream<_i7.TvSeriesTopRatedState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i8.Stream<_i7.TvSeriesTopRatedState>.empty())
          as _i8.Stream<_i7.TvSeriesTopRatedState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void fetchTopRatedTv() =>
      super.noSuchMethod(Invocation.method(#fetchTopRatedTv, []),
          returnValueForMissingStub: null);
  @override
  void emit(_i7.TvSeriesTopRatedState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i9.Change<_i7.TvSeriesTopRatedState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
}
